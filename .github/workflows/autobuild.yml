name: Update installer images

on: [push] 
 # schedule:
 #   - cron: 32 20 * * *

jobs:
  build:
    runs-on: ubuntu-latest
    container: 'debian:10'
    env:
      repo_dir: .
      build_needed: no
    
    steps: 
    - name: update apt
      run: apt-get update
    
    - name: install curl
      run: apt-get -y install curl
    
    ##check for build flag, 
    - name: check for the build needed flag
      run: echo "::set-env name=build_needed::$(curl -sL https://github.com/1000001101000/Debian_on_Buffalo/raw/master/.rebuild 2>/dev/null)"  
    
    - name: ensure build packages are installed
      if: env.build_needed == 'yes'
      run: apt-get -y install gzip rsync wget cpio faketime u-boot-tools libarchive-cpio-perl devio curl git gawk xz-utils
    
    - name: if needed, clone the repo for build
      if: env.build_needed == 'yes'
      run: git clone --depth 1 https://github.com/${{github.repository}}; echo "::set-env name=repo_dir::$(ls -rt | tail -n 1)"
    
    - name: set git user name
      if: env.build_needed == 'yes'
      run: git config user.name "workflow@github"; git config user.email "workflow@github"
      working-directory: "${{env.repo_dir}}"
      
    - name: build stretch armel installer
      if: env.build_needed == 'yes'
      run: ./generate_images_armel.sh
      working-directory: "${{env.repo_dir}}/Stretch/installer_images/build/"
    
    - name: copy new images
      if: env.build_needed == 'yes'
      run: cp -v output/initrd.buffalo.armel ../armel_devices/initrd.buffalo;cp -v output/uImage*buffalo.* ../armel_devices/;cp -v output/vmlinuz-armel ../armel_devices/vmlinuz; rm output/*
      working-directory: "${{env.repo_dir}}/Stretch/installer_images/build/"
      
    - name: record hash of base installer image
      if: env.build_needed == 'yes'
      run: cat armel-files/initrd.gz | md5sum > last_build_armel.txt
      working-directory: "${{env.repo_dir}}/Stretch/installer_images/build/"
      
    - name: build stretch armhf installer
      if: env.build_needed == 'yes'
      run: ./generate_images_armhf.sh
      working-directory: "${{env.repo_dir}}/Stretch/installer_images/build/"
      
    - name: copy new images
      if: env.build_needed == 'yes'
      run: cp -v output/initrd.buffalo.armhf ../armhf_devices/initrd.buffalo;cp -v output/uImage*buffalo.* ../armhf_devices/; rm output/*
      working-directory: "${{env.repo_dir}}/Stretch/installer_images/build/"
      
    - name: record hash of base installer image
      if: env.build_needed == 'yes'
      run: cat armhf-files/initrd.gz | md5sum > last_build_armhf.txt
      working-directory: "${{env.repo_dir}}/Stretch/installer_images/build/"
      
    - name: build buster armel installer
      if: env.build_needed == 'yes'
      run: ./generate_images_armel.sh
      working-directory: "${{env.repo_dir}}/Buster/installer_images/build/"
    
    - name: copy new images
      run: cp -v output/initrd.buffalo.armel ../armel_devices/initrd.buffalo;cp -v output/uImage*buffalo.* ../armel_devices/;cp -v output/vmlinuz-armel ../armel_devices/vmlinuz; rm output/*
      working-directory: "${{env.repo_dir}}/Buster/installer_images/build/"
      
    - name: record hash of base installer image
      if: env.build_needed == 'yes'
      run: cat armel-files/initrd.gz | md5sum > last_build_armel.txt
      working-directory: "${{env.repo_dir}}/Buster/installer_images/build/"
    
    - name: build buster armhf installer
      if: env.build_needed == 'yes'
      run: ./generate_images_armhf.sh
      working-directory: "${{env.repo_dir}}/Buster/installer_images/build/"
      
    - name: copy new images
      if: env.build_needed == 'yes'
      run: cp -v output/initrd.buffalo.armhf ../armhf_devices/initrd.buffalo;cp -v output/uImage*buffalo.* ../armhf_devices/; rm output/*
      working-directory: "${{env.repo_dir}}/Buster/installer_images/build/"
      
    - name: record hash of base installer image
      if: env.build_needed == 'yes'
      run: cat armhf-files/initrd.gz | md5sum > last_build_armhf.txt
      working-directory: "${{env.repo_dir}}/Buster/installer_images/build/"
      
    - name: set rebuild needed flag 
      if: env.build_needed == 'yes'
      run: echo no > .rebuild
      working-directory: "${{env.repo_dir}}"
    
    - name: if needed, commit
      if: env.build_needed == 'yes'
      run: git diff --compact-summary; git commit -v -a -m "update installer images"
      working-directory: "${{env.repo_dir}}"
    
    - name: commit new images
      if: env.build_needed == 'yes'
      run: git push https://${{github.actor}}:${{secrets.GITHUB_TOKEN}}@github.com/${{github.repository}}.git HEAD:master
      working-directory: "${{env.repo_dir}}"
