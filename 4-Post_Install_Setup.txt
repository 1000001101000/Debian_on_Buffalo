All of these steps are recommended but optional, they should be run as root.


Find the device:
The kernel is unable to get the MAC address for these network devices on their own, I've added logic to the installer to allow it look them up from the bootloader and set them at install time and then hardcode them in /etc/network/interfaces at the end of the install. If this failed for some reason the kernel will set a random MAC address at boot which could result in a new IP address being assigned via DHCP. There are several ways to find the address it has been assigned, an easy on is to scan for ssh servers on your network with NMAP:
   nmap -p22 --open 192.168.1.*   or similar.

To set it permanently to the desired value modify /etc/network/interfaces to manually set the MAC address for your device similar to:
   # The primary network interface
   allow-hotplug eth0
   iface eth0 inet dhcp
hwaddress ether AA:BB:CC:DD:EE:FF

To get the device's MAC address you can look at the sticker on the device or:

**note this is now done automatically as part of the installer
Setup fw_printenv to view u-boot data, I use this to grab the MAC address for later steps. 
**Warning, Modifying them can render your device un-bootable.
   echo "/dev/mtdblock1 0x00000 0x10000 0x10000" >> /etc/fw_env.config

**note this is now done automatically as part of the installer
Get the MAC address of the ethernet adapter (it can also be obtained from the sticker on the device):
   fw_printenv | grep eth[012]add

For the LS2XX,LS4XX and TS1XXX (single NIC devices) the MAC is stored in eth1address.
For the TS3400D, eth0=ethaddress and eth1=eth1address. 
 

Setup your existing raid arrays for use on the new system:
1. If you had raid arrays defined at install time the installer should have installed mdadm, if not install it:
   apt-get install mdadm
2. Use mdadm to scan for existing raid arrays (presumable the ones you set up while on stock firmware)
   ~# mdadm --detail --scan
   ARRAY /dev/md0 metadata=0.90 UUID=8de323cf:21f920b7:2776d444:be501e4f
   ARRAY /dev/md1 metadata=1.2 UUID=e82d03b7:a7afdb01:663e8e97:125fc7c9
   ARRAY /dev/md20 metadata=1.2 UUID=116997d2:e7f48544:24542b4e:8e4c2e18
3. Edit /etc/mdadm/mdadm.conf, make sure there is a line for each array listed by the command from the previous step.
4. If you had to make changes, generate a new initramfs and reboot.
   update-initramfs -u
   reboot
5. You should now see all the arrays listed in /sys/block
   ls /sys/block
6. Presumably you'll already have used some of these arrays as your /boot,/ and swap during install and don't need to configure them further, if you have a data array/disk create a mountpoint for it similar to:
   mkdir /mnt/array
7. If you are trying to setup an array created by the stock firmware it is probably formatted as xfs, install the xfs utilities to manage it.
   apt-get install xfsprogs
8. Try mounting your array manually using the device name listed in /sys/block and the mount point you created.
   mount /dev/md20 /mnt/array
9. Assuming this succeeded verify the filesystem of the array.
   ~# mount | grep /mnt/array
   /dev/md20 on /mnt/array type xfs (rw,relatime)
10. Unmount the array
   umount /dev/md20
11. Create an entry for the array in /etc/fstab using the info gathered above
    /dev/md20	/mnt/array           xfs    defaults        0       2
12. Verify your fstab entry works by mounting the array
    mount /mnt/array
13. Generate a new initramfs that accounts for the new configuration
    update-initramfs -u

**note: make certain any fstab entries you add are working properly before rebooting. If the system is unable to mount all the filesystems the default behavior is to stop the boot process. If this happens you'll need to remove the fstab entry (likely by connecting the drive to another system) to make the system bootable again. You can avoid this situation entirely by adding the "nofail" option so that system continues booting with out the filesystem or even the "noauto" option which requires you to manually mount it as needed. Personally, I just make sure to test my fstab entries whenever I make a change and manually fix the fstab if I get into trouble.

Upgrade the kernel:
This version of the debian installer will download and install the latest version of all packages except the kernel.
You can upgrade it to the latest version for the distro with:
   apt-get upgrade linux-image-armmp
You will have to do this in the future when you want to update to the latest kernel.

**note: updating the distro's kernel should be safe but installing the "backports" kernel requires additional steps. Since you are basically installing the kernel for a newer distro you also need the DTB files from that newer kernel (ie you need to put Buster's DTBS in /etc/flash-kernel/dtbs/ before trying to upgrade to the stretch-backports kernel).

If something goes wrong with upgrading/installing a new kernel you can always connect the drive(s) to another system (or load the installer environment via TFTP, etc) and restore the uImage.buffalo.bak and initrd.buffalo.bak from the last working kernel.

Proper Restart/Shutdown:
The different groups of devices use different mechanisms to signal the hardware whether to poweroff or restart when the device shuts down. All of the devices will reboot when a restart command is issued (the LS441 will only do so via the script mentioned below). For the non-LS400 devices I'm still researching how to properly command them to poweroff, currently they will also reboot if a shutdown command is issued. If you command a halt (shutdown -H) they will go down but not completely poweroff and will need unplugged to completely poweroff. I'm still working on a complete solution for those devices.   

For the LS4XX and TS1200 devices the stock firmware activates/deactivates an unused led/interrupt pin on the network adapter to signal whether the device should reboot after powering off. On the ls441 this is tied to the same gpio pin as the power button. To allow the power button to function this led is set to "off" at boot and needs to be set to "on" during the shutdown process if a reboot is desired. I included a script to handle this so that the ls441 can be rebooted successfully (rather than just powering off). 

**note this is now done automatically as part of the installer
1. install phytool on the device
   apt-get install git build-essential
   git clone https://github.com/wkz/phytool
   cd phytool
   make install
   
2. Upload ls400_restart.sh from the Tools section to /lib/systemd/system-shutdown/
3. Make ls400_restart.sh executable
   chmod +x /lib/systemd/system-shutdown/ls400-restart.sh
4. The device should now restart if a restart command is issued and poweroff if a shutdown command is issued.

**if for some reason the power button isn't working to start the device, remove the power adapter for a few seconds then replace it and try again.

Hwclock:
Unfortunately, the debian kernel currently does not support the external RTC used by the LS4XX, TS1XXX and TS3X00 devices. The LS200 uses the RTC built into the SoC which does work although does not maintain a value if the device is unplugged. Personally, I just do without it and never really notice the difference. The combination of ntp and fake-hwclock allows the system to keep the current time up to date and ensure that at boot time the clock is set to the time of the last shutdown rather than 1/1/1970 or something similar.
    apt-get install fake-hwclock ntp
    
Alternatively, you can enable it's support by compiling the appropriate kernel module (this is what I do for hardware testing). I created a script that automates the process of building and installing individual modules, it's published at:
https://github.com/1000001101000/Debian_Module_Builder
the required option is CONFIG_RTC_DRV_RS5C372=y which is included as one of the examples in the script.

Hostname:
set hostname if you want since installer won't prompt for it.
   echo myhostname > /etc/hostname

Motd:
If you don't want the typical message of the day to show when you log in:
   >/etc/motd

**note this is now done automatically as part of the installer
Install ntp to automatically sync your system clock:
   apt-get install ntp

**note this is now done automatically as part of the installer
Install lmsensors so you can monitor the CPU temperature and fan speed:
   apt-get install lm-sensors

   ~# sensors
   armada_thermal-virtual-0
   Adapter: Virtual device
   temp1:        +50.1Â°C  

   gpio_fan-isa-0000
   Adapter: ISA adapter
   fan1:        5000 RPM  (min =    0 RPM, max = 5000 RPM)
   
**Note: recent kernels (Buster) now show the temperature reading from the sensor in the ethernet chip which can be used as an ambient temperature reading in addition to the CPU temperature. 
   
   
Setup fancontrol to automatically adjust the fan speed based on CPU temperature:
   apt-get install fancontrol
   pwmconfig
   ***follow the prompts to set the temperature/fan speed settings.


If your fan should fail (I tested by unplugging it while running) it will trigger a udev event which you can write udev rules to take an action on. I'll elaborate on that if I ever get around to doing so. The details of the udev event from when I tested were:

root@LS421DE:~# udevadm monitor -p
monitor will print the received events for:
UDEV - the event which udev sends out after rule processing
KERNEL - the kernel uevent

KERNEL[89.158141] change   /devices/platform/gpio-fan (platform)
ACTION=change
DEVPATH=/devices/platform/gpio-fan
DRIVER=gpio-fan
MODALIAS=of:Ngpio-fanT<NULL>Cgpio-fan
OF_COMPATIBLE_0=gpio-fan
OF_COMPATIBLE_N=1
OF_FULLNAME=/gpio-fan
OF_NAME=gpio-fan
SEQNUM=1517
SUBSYSTEM=platform

UDEV  [89.169215] change   /devices/platform/gpio-fan (platform)
ACTION=change
DEVPATH=/devices/platform/gpio-fan
DRIVER=gpio-fan
MODALIAS=of:Ngpio-fanT<NULL>Cgpio-fan
OF_COMPATIBLE_0=gpio-fan
OF_COMPATIBLE_N=1
OF_FULLNAME=/gpio-fan
OF_NAME=gpio-fan
SEQNUM=1517
SUBSYSTEM=platform
USEC_INITIALIZED=89163967


Setup TriggerHappy to map actions to button presses on the device:
   apt-get install triggerhappy

Events can be associated with buttons by running the following command and pushing buttons on the device.
   thd --dump /dev/input/event*   

**I beleive you can then setup thd to run certain scripts when a given button is pressed, I haven't looked into it yet personally.

Using LEDs:
I've done my best to map all the LEDs which are controlled by the system's GPIO controller in the device tree so that they can be used directly (on some models some are controlled by a seperate microcontroller or by the sata controller, I'm still working on a way to control those). The entries for the LEDs can be found under /sys/class/leds/. They can be toggled on and off by setting their "brightness":

   ~# echo 1 > /sys/class/leds/ls441de\:red\:hdd0err/brightness 
   ~# echo 0 > /sys/class/leds/ls441de\:red\:hdd0err/brightness 

In the device trees for devices that don't have individual drive activity leds. I've configured the white function led to blink with disk activity, this is both to make testing the trees a little easier and because this is more like how typical computers/servers behave. This behavior can be changed by modifying the default and trigger values in the device tree as well changing the settings in the /sys/class/leds/ entries.


Samba:
If your looking to use your device as a Samba server you'll need to do a bit of setup to get it working. The following seems to be a pretty good guide:
https://www.bleepingcomputer.com/forums/t/598615/a-simple-beginners-guide-to-setting-up-a-samba-share/

One helpful hint is that samba includes the testparm utility which will validate your smb.conf and display any error/warnings encountered trying to parse it.

