diff -uNr vanilla-source-4.12/drivers/net/ethernet/marvell/mvmdio.c linux-source-4.12/drivers/net/ethernet/marvell/mvmdio.c
--- vanilla-source-4.12/drivers/net/ethernet/marvell/mvmdio.c	2019-09-12 14:04:55.907030656 -0500
+++ linux-source-4.12/drivers/net/ethernet/marvell/mvmdio.c	2019-09-12 14:12:46.636570239 -0500
@@ -53,7 +53,7 @@
 struct orion_mdio_dev {
 	struct mutex lock;
 	void __iomem *regs;
-	struct clk *clk[3];
+	struct clk *clk;
 	/*
 	 * If we have access to the error interrupt pin (which is
 	 * somewhat misnamed as it not only reflects internal errors
@@ -187,7 +187,7 @@
 	struct resource *r;
 	struct mii_bus *bus;
 	struct orion_mdio_dev *dev;
-	int i, ret;
+	int ret;
 
 	r = platform_get_resource(pdev, IORESOURCE_MEM, 0);
 	if (!r) {
@@ -216,20 +216,11 @@
 
 	init_waitqueue_head(&dev->smi_busy_wait);
 
-	for (i = 0; i < ARRAY_SIZE(dev->clk); i++) {
-		dev->clk[i] = of_clk_get(pdev->dev.of_node, i);
-		if (IS_ERR(dev->clk[i]))
-			break;
-		clk_prepare_enable(dev->clk[i]);
-	}
+	dev->clk = devm_clk_get(&pdev->dev, NULL);
+	if (!IS_ERR(dev->clk))
+		clk_prepare_enable(dev->clk);
 
 	dev->err_interrupt = platform_get_irq(pdev, 0);
-	if (dev->err_interrupt > 0 &&
-	    resource_size(r) < MVMDIO_ERR_INT_MASK + 4) {
-		dev_err(&pdev->dev,
-			"disabling interrupt, resource size is too small\n");
-		dev->err_interrupt = 0;
-	}
 	if (dev->err_interrupt > 0) {
 		ret = devm_request_irq(&pdev->dev, dev->err_interrupt,
 					orion_mdio_err_irq,
@@ -241,7 +232,8 @@
 			dev->regs + MVMDIO_ERR_INT_MASK);
 
 	} else if (dev->err_interrupt == -EPROBE_DEFER) {
-		return -EPROBE_DEFER;
+		ret = -EPROBE_DEFER;
+		goto out_mdio;
 	}
 
 	mutex_init(&dev->lock);
@@ -260,16 +252,8 @@
 	return 0;
 
 out_mdio:
-	if (dev->err_interrupt > 0)
-		writel(0, dev->regs + MVMDIO_ERR_INT_MASK);
-
-	for (i = 0; i < ARRAY_SIZE(dev->clk); i++) {
-		if (IS_ERR(dev->clk[i]))
-			break;
-		clk_disable_unprepare(dev->clk[i]);
-		clk_put(dev->clk[i]);
-	}
-
+	if (!IS_ERR(dev->clk))
+		clk_disable_unprepare(dev->clk);
 	return ret;
 }
 
@@ -277,18 +261,11 @@
 {
 	struct mii_bus *bus = platform_get_drvdata(pdev);
 	struct orion_mdio_dev *dev = bus->priv;
-	int i;
 
-	if (dev->err_interrupt > 0)
-		writel(0, dev->regs + MVMDIO_ERR_INT_MASK);
+	writel(0, dev->regs + MVMDIO_ERR_INT_MASK);
 	mdiobus_unregister(bus);
-
-	for (i = 0; i < ARRAY_SIZE(dev->clk); i++) {
-		if (IS_ERR(dev->clk[i]))
-			break;
-		clk_disable_unprepare(dev->clk[i]);
-		clk_put(dev->clk[i]);
-	}
+	if (!IS_ERR(dev->clk))
+		clk_disable_unprepare(dev->clk);
 
 	return 0;
 }
